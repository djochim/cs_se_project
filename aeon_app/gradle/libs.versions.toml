[versions]
agp = "8.9.1"
android-compileSdk = "35"
android-minSdk = "24"
android-targetSdk = "35"
androidx-activityCompose = "1.10.1"
androidx-lifecycle = "2.8.4"
androidx-crypto = "1.1.0-alpha06"
compose-multiplatform = "1.7.3"
coroutine = "1.10.1"
coil = "3.0.4"
otel = "1.48.0"
otelktor = "2.14.0-alpha"
otelsemcov = "1.30.0"
junit = "5.12.0"
kermit = "2.0.4"
kotlin = "2.1.20"
koin = "3.4.3"
koinAndroid = "4.0.3"
kotlinxDatetime = "0.6.0"
kotlinxSerialization = "1.8.0"
ktor = "3.1.2"
kover = "0.9.1"
kotest = "5.9.1"
mockk = "1.13.17"
mockative = "3.0.1"
mokkery = "2.7.2"
klogging = "0.9.4"
ksp = "2.0.21-1.0.28"
mongo = "5.3.0"
markdown = "0.29.0"
material = "1.12.0"
multiplatformSettigs = "1.3.0"
navigation = "2.8.0-alpha10"
openai = "4.0.0-beta01"
securityCryptoKtx = "1.0.0"
uiTest = "1.7.8"

[libraries]
androidx-ui-test = { module = "androidx.compose.ui:ui-test", version.ref = "uiTest" }
androidx-ui-test-manifest = { module = "androidx.compose.ui:ui-test-manifest", version.ref = "uiTest" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit5", version.ref = "kotlin" }
junit-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junit-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit" }
junit-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit" }
kotest-assert = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
androidx-lifecycle-viewmodel = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-viewmodel", version.ref = "androidx-lifecycle" }
androidx-lifecycle-viewmodel-compose = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-viewmodel-compose", version.ref = "androidx-lifecycle" }
androidx-lifecycle-runtime-compose = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-runtime-compose", version.ref = "androidx-lifecycle" }
androidx-crypto = { module = "androidx.security:security-crypto-ktx", version.ref = "androidx-crypto" }
coil = { module = "io.coil-kt.coil3:coil-svg", version.ref = "coil" }
coil-compose = { module = "io.coil-kt.coil3:coil-compose", version.ref = "coil" }
material = { module = "com.google.android.material:material", version.ref = "material" }
kermit = { module = "co.touchlab:kermit", version.ref = "kermit" }
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-android-core = { module = "io.insert-koin:koin-core", version.ref = "koinAndroid" }
koin-compose = { module = "io.insert-koin:koin-compose", version.ref = "koinAndroid" }
koin-compose-viewmodel = { module = "io.insert-koin:koin-compose-viewmodel", version.ref = "koinAndroid" }
koin-compose-viewmodel-navigation = { module = "io.insert-koin:koin-compose-viewmodel-navigation", version.ref = "koinAndroid" }
koin-ktor = { module = "io.insert-koin:koin-ktor", version.ref = "koin" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutine" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetime" }
kotlinx-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlinxSerialization" }
ktor-otel = { module = "io.opentelemetry.instrumentation:opentelemetry-ktor-3.0", version.ref = "otelktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-content = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-client-tests = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }
ktor-serialization-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-serialization-protobuf = { module = "io.ktor:ktor-serialization-kotlinx-protobuf", version.ref = "ktor" }
ktor-server-content = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-server-core = { module = "io.ktor:ktor-server-core-jvm", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty-jvm", version.ref = "ktor" }
ktor-server-tests = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }
ktor-server-websocket = { module = "io.ktor:ktor-server-websockets", version.ref = "ktor" }
ktor-server-logging = { module = "io.klogging:slf4j-klogging", version.ref = "klogging" }
ktor-server-logging-calls = { module = "io.ktor:ktor-server-call-logging", version.ref = "ktor" }
ktor-server-auth-core = { module = "io.ktor:ktor-server-auth", version.ref = "ktor" }
ktor-server-auth-jwt = { module = "io.ktor:ktor-server-auth-jwt", version.ref = "ktor" }
ktor-server-statuspages = { module = "io.ktor:ktor-server-status-pages", version.ref = "ktor" }
mongo-kotlin-coroutine = { module = "org.mongodb:mongodb-driver-kotlin-coroutine", version.ref = "mongo" }
mongo-bson = { module = "org.mongodb:bson-kotlinx", version.ref = "mongo" }
markdown-renderer = { module = "com.mikepenz:multiplatform-markdown-renderer-m3", version.ref = "markdown" }
multiplatform-settings = { module = "com.russhwolf:multiplatform-settings", version.ref = "multiplatformSettigs" }
multiplatform-settings-serialization = { module = "com.russhwolf:multiplatform-settings-serialization", version.ref = "multiplatformSettigs" }
compose-navigation = { module = "org.jetbrains.androidx.navigation:navigation-compose", version.ref = "navigation" }
openai-client = { module = "com.aallam.openai:openai-client", version.ref = "openai" }
otel-bom = { module = "io.opentelemetry:opentelemetry-bom", version.ref = "otel" }
otel-sdk-configure = { module = "io.opentelemetry:opentelemetry-sdk-extension-autoconfigure" }
otel-exporter-otlp = { module = "io.opentelemetry:opentelemetry-exporter-otlp" }
otel-semconv = { module = "io.opentelemetry.semconv:opentelemetry-semconv", version.ref = "otelsemcov" }
androidx-security-crypto-ktx = { group = "androidx.security", name = "security-crypto-ktx", version.ref = "securityCryptoKtx" }


[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
composeMultiplatform = { id = "org.jetbrains.compose", version.ref = "compose-multiplatform" }
composeCompiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
allOpen = { id = "plugin.allopen", version.ref = "kotlin" }
kotlinJvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
ktor = { id = "io.ktor.plugin", version.ref = "ktor" }
kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kover" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
serialization = { id = "plugin.serialization", version.ref = "kotlin" }
mockative = { id = "io.mockative", version.ref = "mockative" }
mokkery = { id = "dev.mokkery", version.ref = "mokkery" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }